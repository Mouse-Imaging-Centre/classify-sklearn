#!/Users/jason/Library/Enthought/Canopy_64bit/User/bin/python

import numpy as np
import argparse
import pickle
from pyminc.volumes.factory import *
from sklearn.naive_bayes import GaussianNB
from sklearn import svm,tree
from sklearn.externals import joblib
from sklearn import preprocessing

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Apply previously trained classifier")
    parser.add_argument('--probabilities', action="store_true", help="Also output the probabilities of each class")
    parser.add_argument('--mask', help="Mask within which to evaluate classifier")
    parser.add_argument('--scale', action="store_true", help="Scale data. Use this option only if --scale was also specified when training the classifier")
    parser.add_argument('input_classifier', help="The classifier output from classify_scikit")
    parser.add_argument('feature_volumes', nargs="+", help="Feature volumes. Have to be specified in same order as when training")
    parser.add_argument('output_volume', help="The output minc volume")
    args = parser.parse_args()

    # load the classifier
    clf = joblib.load(args.input_classifier)
    #clf = pickle.load(open(args.input_classifier))

    # assemble the feature volumes
    featureVols = [volumeFromFile(x) for x in args.feature_volumes]


    # load the mask if so desired
    if args.mask:
        maskVol = volumeFromFile(args.mask)
        # mask1D = maskVol.data.reshape(-1)
        featureSize = float(np.sum(maskVol.data > 0.5))
    else:
        featureSize = np.prod(featureVols[0].data.shape)

    predictData = np.zeros([featureSize, len(featureVols)])
    for i in range(len(featureVols)):
        if args.mask:
            predictData[:,i] = featureVols[i].data[maskVol.data>0.5].reshape(-1)
        else:
            predictData[:,i] = featureVols[i].data.reshape(-1)

    if args.scale:
        predictData = preprocessing.scale(predictData)
    # open the output volume
    # TODO: check for file existance and clobber
    outVol = volumeLikeFile(args.feature_volumes[0], args.output_volume)

    # predict and write to file
    if args.mask:
        outVol.data[maskVol.data>0.5] = clf.predict(predictData)
    else:
        outVol.data[:,:,:] = clf.predict(predictData).reshape(outVol.data.shape)
    outVol.writeFile()
    outVol.closeVolume()

    # compute and output the class probabilities if so desired
    if args.probabilities:
        probs = clf.predict_proba(predictData)
        # output each class probability in separate file
        for i in range(probs.shape[1]):
            outVol = volumeLikeFile(args.feature_volumes[0], args.output_volume.replace('.mnc', '_prob_class%02d.mnc' % i))
            if args.mask:
                outVol.data[maskVol.data>0.5] = probs[:,i]
            else:
                outVol.data[:,:,:] = probs[:,i].reshape(outVol.data.shape)
            outVol.writeFile()
            outVol.closeVolume()
